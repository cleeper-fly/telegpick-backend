name: CI

on:
  push:
    branches:
      - master

env:
  PYTHON_VERSION: "3.10.4"
  POETRY_VERSION: "1.4.2"
  POETRY_URL: https://install.python-poetry.org
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_IMAGE_NAME: my-apps
  DOCKER_IMAGE_TAG: latest

jobs:
#  prepare:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Python ${{ env.PYTHON_VERSION }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#        id: setup_python
#
#      - name: Install Poetry ${{ env.POETRY_VERSION }}
#        run: |
#          sudo apt-get update -y
#          sudo apt-get install -y git gcc g++ build-essential
#          curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}
#          echo "$HOME/.local/bin" >> $GITHUB_PATH
#
#      - name: Install Dependencies
#        run: poetry install
#
#  tests:
#    needs: ['prepare']
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:14-alpine
#        env:
#          POSTGRES_DB: test
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#        ports:
#          - 5432:5432
#    env:
#      DB_HOST: 127.0.0.1
#      DB_USER: postgres
#      DB_PASSWORD: postgres
#      DB_NAME: test
#      DB_PORT: 5432
#      SECRET_KEY: test
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Python ${{ env.PYTHON_VERSION }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#        id: setup_python
#
#      - name: Cache dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.cache/pypoetry
#          key: poetry-cache-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ env.POETRY_VERSION }}
#
#      - name: Cache Packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.local
#          key: poetry-local-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
#
#      - name: Install Poetry ${{ env.POETRY_VERSION }}
#        run: |
#          sudo apt-get update -y
#          sudo apt-get install -y git gcc g++ build-essential
#          curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}
#          echo "$HOME/.local/bin" >> $GITHUB_PATH
#
#      - name: Run tests
#        run: poetry run pytest tests/ -v
#
#  isort-lint:
#    needs: ['prepare']
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:14-alpine
#        env:
#          POSTGRES_DB: test
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#        ports:
#          - 5432:5432
#    env:
#      DB_HOST: 127.0.0.1
#      DB_USER: postgres
#      DB_PASSWORD: postgres
#      DB_NAME: test
#      DB_PORT: 5432
#      SECRET_KEY: test
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Python ${{ env.PYTHON_VERSION }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#        id: setup_python
#
#      - name: Cache dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.cache/pypoetry
#          key: poetry-cache-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ env.POETRY_VERSION }}
#
#      - name: Cache Packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.local
#          key: poetry-local-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
#
#      - name: Install Poetry ${{ env.POETRY_VERSION }}
#        run: |
#          sudo apt-get update -y
#          sudo apt-get install -y git gcc g++ build-essential
#          curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}
#          echo "$HOME/.local/bin" >> $GITHUB_PATH
#      - name: Run isort lint
#        run: poetry run task isort-lint
#
#  black-lint:
#    needs: [ 'prepare' ]
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:14-alpine
#        env:
#          POSTGRES_DB: test
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#        ports:
#          - 5432:5432
#    env:
#      DB_HOST: 127.0.0.1
#      DB_USER: postgres
#      DB_PASSWORD: postgres
#      DB_NAME: test
#      DB_PORT: 5432
#      SECRET_KEY: test
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Python ${{ env.PYTHON_VERSION }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#        id: setup_python
#
#      - name: Cache dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.cache/pypoetry
#          key: poetry-cache-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ env.POETRY_VERSION }}
#
#      - name: Cache Packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.local
#          key: poetry-local-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
#
#      - name: Install Poetry ${{ env.POETRY_VERSION }}
#        run: |
#          sudo apt-get update -y
#          sudo apt-get install -y git gcc g++ build-essential
#          curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}
#          echo "$HOME/.local/bin" >> $GITHUB_PATH
#
#      - name: Run black lint
#        run: poetry run task black-lint
#
#  pip-check:
#    needs: [ 'prepare' ]
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:14-alpine
#        env:
#          POSTGRES_DB: test
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#        ports:
#          - 5432:5432
#    env:
#      DB_HOST: 127.0.0.1
#      DB_USER: postgres
#      DB_PASSWORD: postgres
#      DB_NAME: test
#      DB_PORT: 5432
#      SECRET_KEY: test
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Python ${{ env.PYTHON_VERSION }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#        id: setup_python
#
#      - name: Cache dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.cache/pypoetry
#          key: poetry-cache-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ env.POETRY_VERSION }}
#
#      - name: Cache Packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.local
#          key: poetry-local-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
#
#      - name: Install Poetry ${{ env.POETRY_VERSION }}
#        run: |
#          sudo apt-get update -y
#          sudo apt-get install -y git gcc g++ build-essential
#          curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}
#          echo "$HOME/.local/bin" >> $GITHUB_PATH
#
#      - name: Run pip check
#        run: poetry run task pip-check
#
#  poetry-check:
#    needs: ['prepare']
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:14-alpine
#        env:
#          POSTGRES_DB: test
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#        ports:
#          - 5432:5432
#    env:
#      DB_HOST: 127.0.0.1
#      DB_USER: postgres
#      DB_PASSWORD: postgres
#      DB_NAME: test
#      DB_PORT: 5432
#      SECRET_KEY: test
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Python ${{ env.PYTHON_VERSION }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#        id: setup_python
#
#      - name: Cache dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.cache/pypoetry
#          key: poetry-cache-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ env.POETRY_VERSION }}
#
#      - name: Cache Packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.local
#          key: poetry-local-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
#
#      - name: Install Poetry ${{ env.POETRY_VERSION }}
#        run: |
#          sudo apt-get update -y
#          sudo apt-get install -y git gcc g++ build-essential
#          curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}
#          echo "$HOME/.local/bin" >> $GITHUB_PATH
#
#      - name: Run poetry check
#        run: poetry run task poetry-check
#
#  mypy-check:
#    needs: ['prepare']
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:14-alpine
#        env:
#          POSTGRES_DB: test
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#        ports:
#          - 5432:5432
#    env:
#      DB_HOST: 127.0.0.1
#      DB_USER: postgres
#      DB_PASSWORD: postgres
#      DB_NAME: test
#      DB_PORT: 5432
#      SECRET_KEY: test
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Python ${{ env.PYTHON_VERSION }}
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ env.PYTHON_VERSION }}
#        id: setup_python
#
#      - name: Cache dependencies
#        uses: actions/cache@v3
#        with:
#          path: ~/.cache/pypoetry
#          key: poetry-cache-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ env.POETRY_VERSION }}
#
#      - name: Cache Packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.local
#          key: poetry-local-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}
#
#      - name: Install Poetry ${{ env.POETRY_VERSION }}
#        run: |
#          sudo apt-get update -y
#          sudo apt-get install -y git gcc g++ build-essential
#          curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}
#          echo "$HOME/.local/bin" >> $GITHUB_PATH
#
#      - name: Run mypy lint
#        run: poetry run task mypy-lint

  build-dev:
    runs-on: ubuntu-latest
#    needs: [tests, isort-lint, mypy-check, pip-check, black-lint, poetry-
    environment: docker-env
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: cleeperfly/my-apps

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-test:
    needs: [build-dev]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to test
        run: echo "Deploy to test"